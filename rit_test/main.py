# -*- coding: utf-8 -*-
"""rit_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vZq6TgLCAkpAsqhK5_Z_CxfMyewH2VHn

# DONE
1. Общие трудозатраты на проект в часах;
2. Среднее время, затраченное на решение задач в часах;
3. Медианное время, затраченное на решение задач в часах;
4. Среднее время, затраченное на решение задач каждым из исполнителей в часах;
5. Рассчитать рентабельность проекта по формуле рентабельность = (прибыль*100)/доход.
Расчёт прибыли производить, как прибыль = доход – расходы;
6. Рассчитать среднее количество часов, отрабатываемое каждым сотрудником за день;
7. Вычислить дни отсутствия для каждого сотрудника, с учетом того, что все исполнители
обязаны были работать каждый будний день;
8. Рассчитать средний «вылет» специалиста из оценки в процентах.
9. Дополнительно необходимо сформировать сводный график по проекту с указанием
оценки (в часах) и фактических трудозатрат (в часах) по каждой из задач проекта в виде
отдельного файла png.

# Расписание входов
1. 21:18 04.08 - 0:41 05.08 - (перерыв примерно час)
2. 17:10 05.08 - 18:47 05.08 (перерыв полчаса)
3. 10:31 05.08 - 01.10 06.08 (перерыв час)
4. 04:13 06.08 - 06:30 06.08 (перерыв полчаса)

# Import
"""

import pandas as pd
from matplotlib import pyplot
import matplotlib.pyplot as plt
import seaborn as sns
import gc

"""# Обработка данных"""

path_a = 'C:\\Users\\danil99152\\Downloads\\Тестовое для РИТ\\Приложение А'
data_a = pd.read_table(path_a)
data_a['Дата'] = pd.to_datetime(data_a['Дата'], infer_datetime_format=True, format="%Y-%m-%d", errors='coerce')
data_a

path_b = 'C:\\Users\\danil99152\\Downloads\\Тестовое для РИТ\\Приложение B'
data_b = pd.read_table(path_b)
data_b

path_c = 'C:\\Users\\danil99152\\Downloads\\Тестовое для РИТ\\Приложение C'
data_c = pd.read_table(path_c)
data_c

"""# Анализ

## Общие трудозатраты на проект в часах
"""

data_a['Задача'].unique()

hourcost = pd.DataFrame(data={'Задача': [], 'Часы': []})
for project in data_a['Задача'].unique():
    task = data_a[data_a['Задача'] == project]['Задача']
    hours = data_a[data_a['Задача'] == project]['Часы'].sum()
    hourcost = hourcost.append({'Задача': task.values[0], 'Часы': hours}, ignore_index=True)

print("Общие трудозатраты на проект в часах:")
print(hourcost)

hourcost['Часы'].describe()

mean_hour = hourcost['Часы'].mean()
print("Среднее время:", mean_hour)

median_hour = hourcost['Часы'].median()
print("Медианное время:", median_hour)


def getNum(value):
    return [int(s) for s in value.split('-') if s.isdigit()][0]

"""## Среднее время, затраченное на решение задач каждым из исполнителей в часах"""

data_a['Исполнитель'].unique()

hourcost_by_man = pd.DataFrame(data={'Исполнитель': [], 'Часы': []})
for project in data_a['Исполнитель'].unique():
    task = data_a[data_a['Исполнитель'] == project]['Исполнитель']
    hours = data_a[data_a['Исполнитель'] == project]['Часы'].sum()
    hourcost_by_man = hourcost_by_man.append({'Исполнитель': task.values[0], 'Часы': hours}, ignore_index=True)

print("Среднее время, затраченное на решение задач каждым из исполнителей в часах:")
print(hourcost_by_man)

hourcost_by_man.describe()

mean_hour = hourcost_by_man['Часы'].mean()
mean_hour

hourcost_by_man = hourcost_by_man.merge(data_c, on=['Исполнитель', 'Исполнитель'], how='left')
hourcost_by_man['Зарплата'] = hourcost_by_man['Часы'] * hourcost_by_man['Ставка']
hourcost_by_man

"""## Рентабельность"""

data_a = data_a.merge(hourcost_by_man.filter(['Исполнитель', 'Ставка'], axis=1), on=['Исполнитель', 'Исполнитель'],
                      how='left')

data_a['Расход'] = data_a['Часы'] * data_a['Ставка']

data_a = data_a.drop(['Ставка'], axis=1)

data_a

projects = pd.DataFrame(data={'Задача': [], 'Расход': []})
for project in data_a['Задача'].unique():
    task = data_a[data_a['Задача'] == project]['Задача']
    cost = data_a[data_a['Задача'] == project]['Расход'].sum()
    projects = projects.append({'Задача': task.values[0], 'Расход': cost}, ignore_index=True)
projects

projects['Прибыль'] = 24000 - projects['Расход']
projects['Рентабельность'] = (projects['Прибыль'] * 100) / 24000
projects = projects.merge(hourcost.filter(['Задача', 'Часы'], axis=1), on=['Задача', 'Задача'], how='left')
del hourcost
gc.collect()

projects

mean_profitability = projects['Рентабельность'].mean()
print("Рентабельность проекта =", mean_profitability)

"""## Рассчитать среднее количество часов, отрабатываемое каждым сотрудником за день"""


def getDayofWeek(date):
    return date.dayofweek


dates = data_a.drop(['Задача', 'Расход'], axis=1)
dates = dates.sort_values('Дата')

hours_list = []
for worker, date in zip(dates['Исполнитель'], dates['Дата']):
    hours = dates[(dates['Исполнитель'] == worker) & (dates['Дата'] == date)]['Часы']
    hours_list.append(hours.sum())
dates['Часы'] = hours_list

del hours_list
gc.collect()

dates = dates.drop_duplicates()
dates = dates.reset_index(drop=True)
dates['День недели'] = dates['Дата'].apply(getDayofWeek)
dates

average_worker_time_list = []
for worker in hourcost_by_man['Исполнитель']:
    average_worker_time = dates[dates['Исполнитель'] == worker]['Часы'].sum() / len(
        dates[dates['Исполнитель'] == worker]['Часы'])
    average_worker_time_list.append(average_worker_time)
hourcost_by_man['Среднее рабочее время'] = average_worker_time_list

del average_worker_time_list
gc.collect()

print("Cреднее количество часов, отрабатываемое каждым сотрудником за день:")
print(hourcost_by_man.filter(['Исполнитель', 'Среднее рабочее время'], axis=1))

mean_average_hour = hourcost_by_man['Среднее рабочее время'].mean()
mean_average_hour

mean_overall_hour = hourcost_by_man['Часы'].mean()
mean_overall_hour

"""## Вычислить дни отсутствия для каждого сотрудника, с учетом того, что все исполнители обязаны были работать каждый будний день"""

# Дни прогула сотрудников в будни
print("Дни отсутствия для каждого сотрудника:")
print(dates[(dates['Часы'] < 8) & (dates['День недели'] < 5)])

"""Как я понял задачу "Вылет": найти отношение разности времени от оценки к оценке

## Рассчитать средний «вылет» специалиста из оценки в процентах
"""

grade = data_a.drop(['Дата', 'Расход'], axis=1)
hours_list = []
for worker, task in zip(grade['Исполнитель'], grade['Задача']):
    hours = grade[(grade['Исполнитель'] == worker) & (grade['Задача'] == task)]['Часы']
    hours_list.append(hours.sum())
grade['Часы'] = hours_list

del hours_list
gc.collect()

grade = grade.drop_duplicates()
grade = grade.reset_index(drop=True)
grade = grade.merge(data_b, how='left', on=['Задача', 'Задача'])
grade['Средний вылет'] = (grade['Часы'] - grade['Оценка']) / grade['Оценка'] * 100
grade

mean_worker_grade_list = []
for worker in hourcost_by_man['Исполнитель']:
    grades = grade[grade['Исполнитель'] == worker]['Средний вылет']
    mean_worker_grade_list.append(grades.sum() / len(grades))
hourcost_by_man['Средний вылет работника'] = mean_worker_grade_list

del mean_worker_grade_list
gc.collect()

print("Cредний «вылет» специалиста из оценки в процентах:")
print(hourcost_by_man.filter(['Исполнитель', 'Средний вылет работника'], axis=1))

mean_average_grade = hourcost_by_man['Средний вылет работника'].mean()
print("Средний вылет работника:", mean_average_grade)

"""Вывод по исполнителям: Вася - любит перерабатывать, сидеть до 12 часов работы, иногда успевает быстрее, чем в срок; Маша - неэффективна, не берет много задач, пропускает дедлайны; Петя - склонен к прогулу.

## Дополнительно необходимо сформировать сводный график по проекту
"""

projects = projects.merge(data_b, on=['Задача', 'Задача'], how='left')

timecost = projects.copy()
timecost['Задача'] = timecost['Задача'].apply(getNum)
g = sns.lineplot(x="Задача", y='Часы', data=timecost, marker='o', color='b')
g = sns.lineplot(x="Задача", y='Оценка', data=timecost, marker='o', color='r')
g.set(title='Потраченное время на задачи', xlabel='Номера задач', ylabel='Фактическое (синие) и оцененное (красное)')
sns.set(rc={'figure.figsize': (20, 5)})
g.figure.savefig('hourcost.png')

print("Всего потрачено на проект", data_a['Часы'].sum(), "человеко-часов")
